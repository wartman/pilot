<?php
/**
 * Generated by Haxe 4.0.0-rc.3+e3df7a448
 */

namespace todo\ui;

use \php\_Boot\HxAnon;
use \php\Boot;
use \pilot\_VNode\VNode_Impl_;
use \pilot\VNodeType;
use \pilot\StatefulWidget;

class TodoItem extends StatefulWidget {
	/**
	 * @var object
	 */
	public $_pilot_props;

	/**
	 * @param object $props
	 * 
	 * @return void
	 */
	public function __construct ($props) {
		#src/pilot/macro/WidgetBuilder.hx:93: characters 9-31
		$this->_pilot_props = new HxAnon();
		#src/pilot/macro/WidgetBuilder.hx:35: characters 33-65
		$this->_pilot_props->todo = $props->todo;
		$this->_pilot_props->store = $props->store;
		#src/pilot/macro/WidgetBuilder.hx:33: characters 33-92
		$this->_pilot_props->editing = ($props->editing === null ? false : $props->editing);

	}

	/**
	 * @return object
	 */
	public function build () {
		#example/todo/ui/TodoItem.hx:22: lines 22-166
		$_gthis = $this;
		#example/todo/ui/TodoItem.hx:23: lines 23-165
		$props_child = null;
		#example/todo/ui/TodoItem.hx:24: lines 24-100
		$styles = \Array_hx::wrap([
			"todo-item",
			($this->_pilot_props->todo->complete ? "todo-item--complete" : null),
		]);
		$result = [];
		$i = 0;
		while ($i < $styles->length) {
			$s = $styles->arr[$i];
			if (($s !== null) && ($s !== "")) {
				$result[] = $styles->arr[$i];
			}
			++$i;
		}
		$name = \Array_hx::wrap($result)->join(" ");
		#example/todo/ui/TodoItem.hx:23: lines 23-165
		$props_style = ($name === "" ? null : $name);
		#example/todo/ui/TodoItem.hx:101: characters 21-28
		$__hx__switch = ($this->_pilot_props->editing);
		if ($__hx__switch === false) {
			#example/todo/ui/TodoItem.hx:127: lines 127-163
			$props = new HxAnon([
				"key" => $this->_pilot_props->todo->id,
				"id" => "Todo-" . ($this->_pilot_props->todo->id??'null'),
				"className" => "todo-item",
			]);
			#example/todo/ui/TodoItem.hx:146: lines 146-155
			$props1 = new HxAnon([
				"type" => "todo-f1wmE",
				"checked" => $this->_pilot_props->todo->complete,
			]);
			$this1 = VNode_Impl_::_new(new HxAnon([
				"name" => "input",
				"props" => new HxAnon([
					"type" => "checkbox",
					"className" => $props1->type,
					"checked" => $props1->checked,
					"id" => $props1->id,
				]),
				"children" => new \Array_hx(),
			]));
			#example/todo/ui/TodoItem.hx:156: characters 11-43
			$children = \Array_hx::wrap([VNode_Impl_::_new(new HxAnon([
				"name" => $this->_pilot_props->todo->content,
				"props" => new HxAnon(),
				"type" => VNodeType::VNodeText(),
			]))]);
			$children1 = VNode_Impl_::_new(new HxAnon([
				"name" => "label",
				"props" => new HxAnon(),
				"children" => ($children !== null ? $children : new \Array_hx()),
			]));
			#example/todo/ui/TodoItem.hx:127: lines 127-163
			$children2 = \Array_hx::wrap([
				$this1,
				$children1,
				VNode_Impl_::_new(new HxAnon([
					"name" => "button",
					"props" => new HxAnon(["className" => "destroy"]),
					"children" => new \Array_hx(),
				])),
			]);
			$props_child = VNode_Impl_::_new(new HxAnon([
				"name" => "li",
				"props" => $props,
				"children" => ($children2 !== null ? $children2 : new \Array_hx()),
			]));
		} else if ($__hx__switch === true) {
			#example/todo/ui/TodoItem.hx:102: lines 102-126
			$props2 = new HxAnon([
				"className" => "todo-item editing",
				"key" => $this->_pilot_props->todo->id,
				"id" => "Todo-" . ($this->_pilot_props->todo->id??'null'),
			]);
			$children3 = \Array_hx::wrap([(new TodoInput(new HxAnon([
				"value" => $this->_pilot_props->todo->content,
				"save" => function ($value)  use (&$_gthis) {
					#example/todo/ui/TodoItem.hx:122: characters 15-27
					$_gthis->_pilot_props->todo->content = $value;
					#example/todo/ui/TodoItem.hx:123: characters 15-30
					return $_gthis->set_editing(false);
				},
			])))->render()]);
			#example/todo/ui/TodoItem.hx:102: lines 102-126
			$props_child = VNode_Impl_::_new(new HxAnon([
				"name" => "li",
				"props" => $props2,
				"children" => ($children3 !== null ? $children3 : new \Array_hx()),
			]));
		}
		#example/todo/ui/TodoItem.hx:23: lines 23-165
		$this11 = $props_child;
		if (\Reflect::hasField($this11->props, "className")) {
			$this2 = $props_style;
			$_g = \Reflect::field($this11->props, "className");
			$props_style = ($this2 === null ? $_g : ($_g === null ? $this2 : "" . ($this2??'null') . " " . ($_g??'null')));
		}
		\Reflect::setField($this11->props, "className", $props_style);
		return $this11;
	}

	/**
	 * @param bool $value
	 * 
	 * @return bool
	 */
	public function set_editing ($value) {
		#src/pilot/macro/WidgetBuilder.hx:51: characters 13-39
		$this->_pilot_props->editing = $value;
		#src/pilot/macro/WidgetBuilder.hx:53: characters 13-25
		return $value;
	}
}

Boot::registerClass(TodoItem::class, 'todo.ui.TodoItem');
Boot::registerSetters('todo\\ui\\TodoItem', [
	'editing' => true
]);
